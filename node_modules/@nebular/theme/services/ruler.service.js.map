{"version":3,"file":"ruler.service.js","sourceRoot":"","sources":["../../../../.ng_build/theme/services/ruler.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAc,aAAa,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;;;;;;;;;qCAyCxB,IAAI,OAAO,EAAE;;IAE7C;;;OAGG;;;;;IACH,4CAAa;;;;IAAb;QACE,IAAM,QAAQ,GAAG,IAAI,aAAa,EAAsB,CAAC;QACzD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;QAE9C,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;KAChC;IAED;;;OAGG;;;;;IACH,8CAAe;;;;IAAf;QACE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;KACnC;;gBAtBF,UAAU;;+BAvCX;;SAwCa,oBAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\n\n/**\n * Layout dimensions type\n */\nexport interface NbLayoutDimensions {\n\n  /**\n   * clientWidth\n   * @type {number}\n   */\n  clientWidth: number;\n\n  /**\n   * clientHeight\n   * @type {number}\n   */\n  clientHeight: number;\n\n  /**\n   * scrollWidth\n   * @type {number}\n   */\n  scrollWidth: number;\n\n  /**\n   * scrollHeight\n   * @type {number}\n   */\n  scrollHeight: number;\n}\n\n/**\n * Simple helper service to return Layout dimensions\n * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element\n * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and\n * `.scrollable-container` in the second.\n */\n@Injectable()\nexport class NbLayoutRulerService {\n\n  private contentDimensionsReq$ = new Subject();\n\n  /**\n   * Content dimensions\n   * @returns {Observable<NbLayoutDimensions>}\n   */\n  getDimensions(): Observable<NbLayoutDimensions> {\n    const listener = new ReplaySubject<NbLayoutDimensions>();\n    this.contentDimensionsReq$.next({ listener });\n\n    return listener.asObservable();\n  }\n\n  /**\n   * @private\n   * @returns {Subject<any>}\n   */\n  onGetDimensions(): Subject<any> {\n    return this.contentDimensionsReq$;\n  }\n}\n"]}