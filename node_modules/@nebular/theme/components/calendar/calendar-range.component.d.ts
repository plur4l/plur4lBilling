/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter, Type } from '@angular/core';
import { NbCalendarCell, NbCalendarSize, NbCalendarViewMode } from '../calendar-kit';
export interface NbCalendarRange {
    start: Date;
    end?: Date;
}
/**
 * Calendar component provides a capability to choose ranges.
 * For additional info check `NbBaseCalendarComponent`.
 *
 * ```html
 * <nb-calendar-range [(range)]="range"></nb-calendar-range>
 * ```
 */
export declare class NbCalendarRangeComponent {
    /**
     * Defines if we should render previous and next months
     * in the current month view.
     * */
    boundingMonth: boolean;
    /**
     * Defines starting view for the calendar.
     * */
    startView: NbCalendarViewMode;
    /**
     * A minimum available date for selection.
     * */
    min: Date;
    /**
     * A maximum available date for selection.
     * */
    max: Date;
    /**
     * A predicate that decides which cells will be disabled.
     * */
    filter: (Date) => boolean;
    /**
     * Custom day cell component. Have to implement `NbCalendarCell` interface.
     * */
    _cellComponent: Type<NbCalendarCell<NbCalendarRange>>;
    dayCellComponent: Type<NbCalendarCell<NbCalendarRange>>;
    /**
     * Custom month cell component. Have to implement `NbCalendarCell` interface.
     * */
    monthCellComponent: Type<NbCalendarCell<NbCalendarRange>>;
    /**
     * Custom year cell component. Have to implement `NbCalendarCell` interface.
     * */
    _yearCellComponent: Type<NbCalendarCell<NbCalendarRange>>;
    yearCellComponent: Type<NbCalendarCell<NbCalendarRange>>;
    /**
     * Size of the calendar and entire components.
     * Can be 'medium' which is default or 'large'.
     * */
    size: NbCalendarSize;
    /**
     * Range which will be rendered as selected.
     * */
    range: NbCalendarRange;
    /**
     * Emits range when start selected and emits again when end selected.
     * */
    rangeChange: EventEmitter<NbCalendarRange>;
    onChange(date: Date): void;
    private initDateIfNull();
    private handleSelected(date);
    private selectionStarted();
    private selectStart(start);
    private selectEnd(date);
    private selectRange(range);
}
